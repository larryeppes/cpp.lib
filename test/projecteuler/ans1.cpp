//
// Created by PC on 2018/1/16.
//

#include <iostream>
#include <cstdlib>
#include <cassert>
#include <cmath>

#define LONGLONGMAX 9223372036854775807

using namespace std;

/**
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
void ans1() {
    int n = 1000;
    int total = 3*(n/3*(n/3+1)/2)+5*(n/5*(n/5+1)/2)-15*(n/15*(n/15+1)/2)-n;
    cout << total << endl;
}

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
void ans2() {
    long superimum = 4000000L;
    long start = 2;
    long end = 3;
    long next = start + end;
    long sum = start;
    while (next < superimum) {
        if (!(next & 1))
            sum += next;
        start = end;
        end = next;
        next = start+end;
    }
    cout<< sum<< endl;
}

/**
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143 ?
 */
void ans3() {
    long long x = 3;
    long long y = 600851475143;
    double sqrt_y = sqrt(y);
    while ((y&1)==0){
        cout<<2<<'*';
        y = y>>1;
    }
    while (x <= sqrt_y) {
        if (y%x==0) {
            cout << x<<'*';
            y /= x;
            sqrt_y = sqrt(y);
        } else {
            x += 2;
        }
    }
    cout<<y;
}

/**
 * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
bool ans4_check(int prod) {
    char res[7] = "\n";
    for (int i = 0; i < 6; i++)
        res[i] = '0'+(prod / int(pow(10, i))) % 10;
    bool flag = false;
    for (int i = 0; i < 3; i++)
        if (res[i] != res[5-i])
            flag = true;
    return flag;
}

void ans4() {
    int x = 999;
    int y = 999;
    int sum = x+y;
    int prod = x * y;
    while (ans4_check(prod)) {
        if (x+1>999) {
            sum -= 1;
            x = sum / 2;
            y = sum - x;
        }
        else {
            x += 1;
            y = sum - x;
            prod = x * y;
        }
    }
    cout<<prod<<endl;
}

/**
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
int ans5_gcd(int first, int second) {
    int x = first;
    int y = second;
    if (x < y)
        return ans5_gcd(y, x);
    int diff = x % y;
    while(diff) {
        x = y;
        y = diff;
        diff = x % y;
    }
    return y;
}

void ans5() {
    int supremum = 20;
    int res = 1;
    for (int i = 1; i < supremum; i++) {
        res = res * i / ans5_gcd(res, i);
    }
    cout<<res<<endl;
}

/**
 * The sum of the squares of the first ten natural numbers is,
 * 1^2 + 2^2 + ... + 10^2 = 385
 * The square of the sum of the first ten natural numbers is,
 * (1 + 2 + ... + 10)^2 = 552 = 3025
 * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
 * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
void ans6() {
    int supremum = 100;
    int res = pow(supremum * (supremum + 1) / 2, 2) - supremum * (supremum + 1) * (2 * supremum + 1) / 6;
    cout<<res<<endl;
}

/**
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 * What is the 10 001st prime number?
 */
bool ans7_primeQ(int num) {
    int sup = sqrt(num);
    for (int i = 2; i <= sup; i++)
        if (!(num % i))
            return false;
    return true;
}

void ans7() {
    int supremum = 10001;
    int cnt = 2;
    int p = 3;
    while (cnt < supremum) {
        p += 2;
        if (ans7_primeQ(p))
            cnt++;
    }
    cout<<p<<endl;
}

/**
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 * 73167176531330624919225119674426574742355349194934
 * 96983520312774506326239578318016984801869478851843
 * 85861560789112949495459501737958331952853208805511
 * 12540698747158523863050715693290963295227443043557
 * 66896648950445244523161731856403098711121722383113
 * 62229893423380308135336276614282806444486645238749
 * 30358907296290491560440772390713810515859307960866
 * 70172427121883998797908792274921901699720888093776
 * 65727333001053367881220235421809751254540594752243
 * 52584907711670556013604839586446706324415722155397
 * 53697817977846174064955149290862569321978468622482
 * 83972241375657056057490261407972968652414535100474
 * 82166370484403199890008895243450658541227588666881
 * 16427171479924442928230863465674813919123162824586
 * 17866458359124566529476545682848912883142607690042
 * 24219022671055626321111109370544217506941658960408
 * 07198403850962455444362981230987879927244284909188
 * 84580156166097919133875499200524063689912560717606
 * 05886116467109405077541002256983155200055935729725
 * 71636269561882670428252483600823257530420752963450
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 */
int ans8_string_length(char* s) {
    int i = 0;
    while (s[i] != '\n')
        i++;
    return i;
}

void ans8() {
    char *num = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
    int start = 0, end = 12;
    int num_length = ans8_string_length(num);
    long prod = 1;
    bool initQ = true;
    long max_prod = 0;
    while (end < num_length) {
        if (initQ) {
            for (int i = start; i <= end; i++) {
                if (num[i] != '0')
                    prod *= (num[i]-'0');
                else {
                    prod = 1;
                    start = i + 1;
                    end = start + 12;
                    continue;
                }
            }
            initQ = false;
        }
        if (prod > max_prod)
            max_prod = prod;
        if (end + 1 < num_length) {
            if (num[end + 1] != '0') {
                prod = prod / (num[start++] - '0') * (num[++end] - '0') ;
            } else {
                initQ = true;
                prod=1;
                start = end + 1;
                while(num[start++] != '0');
                end = start + 12;
            }
        }

    }
    cout<<max_prod<<endl;
}

/**
 * aa+bb=cc, a+b+c=1000 1000(500-c)=ab<=((a+b)/2)^2=((1000-c)/2)^2
 */
void ans9() {
    int c = 414;
    int b = 0;
    while (c++ && c < 1000) {
        for (long a = c-1; a > 0; a--) {
            b = 1000 - c - a;
            if (b > a || b < 0) break;
            if (a * a + b * b == c * c) {
                cout << a * b * c << endl;
            }
        }
    }
}

/**
 * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
 * Find the sum of all the primes below two million.
 */
void ans10() {
    int sup = 2000000;
    long sum = 2;
    for (int i = 3; i < sup; i++) {
        if (ans7_primeQ(i)) {
            sum += i;
        }
    }
    cout<<sum<<endl;
}